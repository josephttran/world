{"version":3,"sources":["components/Header/Header.tsx","components/Layout/Layout.tsx","pages/Country.tsx","components/CountriesCard/CountriesCard.tsx","components/FilterRegion/FilterRegion.tsx","components/SearchInput/SearchInput.tsx","pages/Countries.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","title","history","useHistory","useState","themeSwitcherText","setThemeSwitcherText","theme","setTheme","className","onClick","push","document","documentElement","setAttribute","Layout","children","Country","countryName","useParams","countryData","setCountryData","useEffect","a","fetch","data","json","getAndSetCountryData","handleBorderClick","countryCode","name","goBack","length","src","flag","alt","nativeName","population","region","subregion","capital","topLevelDomain","undefined","currencies","languages","borders","map","CountriesCard","flagUrl","FilterRegion","handleFilterRegion","selected","id","onChange","SearchInput","handleSearch","type","placeholder","Countries","setData","setSelected","countriesFieldsMemo","useMemo","getCountryDataFiltered","filteredData","obj","key","fields","res","handleCountriesSearch","event","searchValue","target","value","then","countries","filter","toLowerCase","includes","newData","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00268c17.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport './Header.css';\n\ninterface props {\n  title: string;\n}\n\nconst Header: FunctionComponent<props> = ({ title }) => {\n  const history = useHistory();\n  const [themeSwitcherText, setThemeSwitcherText] = useState('Dark Mode');\n  const [theme, setTheme] = useState('light');\n  \n  const switchTheme = () => {\n    if (theme === 'light') {\n      document.documentElement.setAttribute('data-theme', 'dark');\n      setTheme('dark');\n      setThemeSwitcherText('Light Mode');\n    } else {\n      document.documentElement.setAttribute('data-theme', 'light');\n      setTheme('light');\n      setThemeSwitcherText('Dark Mode');\n    }\n  }\n\n  const GoToCountriesPage = () => {\n    history.push('/world');\n  }\n\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\" onClick={GoToCountriesPage}>{ title }</h1>\n      <button className=\"themeSwitcher\" onClick={switchTheme}>{themeSwitcherText}</button>\n    </header>\n  )\n}\n\nexport default Header;\n\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport './Layout.css';\nimport Header from '../Header/Header';\n\nconst Layout: FunctionComponent<{ \n    children: ReactNode\n  }> = ({ children }) => {\n  return (\n    <div className='container'>\n      <Header title='World App'/>\n      <main className=\"main\">\n        {children}\n      </main>\n      <footer className=\"footer\">World</footer>\n    </div>\n  )\n}\n\nexport default Layout;","import React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport './Country.css';\n\ninterface countryNameParam {\n  countryName:string\n}\n\ninterface country {\n  flag: string;\n  name: string;\n  nativeName: string;\n  population: number;\n  region: string;\n  subregion: string;\n  capital: string;\n  topLevelDomain: string;\n  currencies: Array<{ code: string, name: string, symbol: string }>;\n  languages: Array<{iso639_1: string, iso639_2: string, name: string, nativeName: string}>\n  borders: Array<string>\n}\n\nconst Country = () => {\n  const history = useHistory();\n  const {countryName} = useParams<countryNameParam>();\n  const [countryData, setCountryData] = useState<Array<country>>([]);\n\n  useEffect(() => {\n    async function getAndSetCountryData() {\n      const data = await fetch(`https://restcountries.com/v2/name/${countryName}?fullText=true`)\n      const json = await data.json();\n      setCountryData(json);\n    }\n\n    getAndSetCountryData();\n  }, [countryName]);\n\n  const handleBorderClick = (countryCode: string) => async () => {\n    const data = await (await fetch(`https://restcountries.com/v2/alpha/${countryCode}`)).json();\n    const name = data.name;\n\n    history.push(`/world/country/${name}`);\n  }\n\n  return (\n    <div className='country-container'>\n      <button className=\"btn-previous\" onClick={() => history.goBack()}>\n        &lt;-  Back\n      </button>\n\n      {\n        countryData.length === 0 \n        ? \" LOADING\"\n        : <div className='country-main'>\n            <img className='country-flag' src={countryData[0].flag} alt={countryName}/>\n            <h2 className='country-header'>{countryData[0].name}</h2>\n            <dl className='country-info-container info-one'>\n              <dt>Native Name: </dt><dd>{countryData[0].nativeName}</dd>\n              <dt>Population: </dt><dd>{countryData[0].population}</dd>\n              <dt>Region: </dt><dd>{countryData[0].region}</dd>\n              <dt>Sub Region: </dt><dd>{countryData[0].subregion}</dd>\n              <dt>Capital: </dt> <dd>{countryData[0].capital}</dd>\n            </dl>\n            <dl className='country-info-container info-two'>\n              <dt>Top Level Domain: </dt><dd>{countryData[0].topLevelDomain}</dd>\n              <dt>Currencies: </dt><dd>{countryData[0].currencies === undefined ? 'NONE' : countryData[0].currencies[0].name}</dd>\n              <dt>Languages: </dt><dd>{countryData[0].languages === undefined ? 'NONE' : countryData[0].languages[0].name}</dd>          \n            </dl>\n            <dl className='country-info-container country-borders'><dt>Borders:</dt> \n            {\n              countryData[0].borders === undefined \n              ? <dd>{'NONE'}</dd>\n              : countryData[0].borders.map(countryCode => {\n                return <button key={countryCode} onClick={handleBorderClick(countryCode)}>{countryCode}</button>\n              })\n            }\n            </dl>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default Country;","import React, { FunctionComponent } from 'react';\nimport { useHistory } from 'react-router';\nimport './CountriesCard.css';\n\ninterface CountriesCardProps {\n  flagUrl: string;\n  countryName: string;\n  population: number;\n  region: string;\n  capital: string;\n}\n\nconst CountriesCard: FunctionComponent<CountriesCardProps> = ({ flagUrl, countryName, population, region, capital }) => {\n  const history = useHistory();\n\n  const handleClick = () => {\n    history.push(`/world/country/${countryName}`);\n  }\n\n  return (\n    <div className='card' onClick={handleClick}>\n      <img className='flag' src={flagUrl} alt={countryName}/>\n      <div className='country'>{countryName}</div>\n      <div className='population'><span>Population:</span> {population}</div>\n      <div className='region'><span>Region:</span> {region}</div>\n      <div className='capital'><span>Capital:</span> {capital}</div>\n    </div>\n  )\n}\n\nexport default CountriesCard;","import React, { ChangeEventHandler, FunctionComponent } from 'react';\n\nconst FilterRegion: FunctionComponent<{\n    handleFilterRegion: ChangeEventHandler<HTMLSelectElement>, \n    selected: string\n  }> = ({ handleFilterRegion, selected }) => {\n  const regionOptions = [\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"];\n  \n  return (\n    <select className='filter-region-select' name=\"\" id=\"\" onChange={handleFilterRegion}>\n      <option id=\"Filter by Region\">Filter by Region</option>\n      {\n        regionOptions.map(region => <option key={region} id={region}>{region}</option>)\n      }\n    </select>\n  )\n}\n\nexport default FilterRegion;","import React, { ChangeEventHandler, FunctionComponent } from 'react';\n\nconst SearchInput: FunctionComponent<{ \n    handleSearch: ChangeEventHandler<HTMLInputElement> \n  }> = ({ handleSearch }) => {\n  return (\n    <input \n      type=\"text\" \n      name=\"search-input\" \n      id=\"search-input\" \n      className=\"search-input\" \n      placeholder=\"Search for Country\" \n      onChange={handleSearch} />\n  )\n}\n\nexport default SearchInput;","import React, { ChangeEvent, useEffect, useMemo, useState } from 'react';\nimport CountriesCard from '../components/CountriesCard/CountriesCard';\nimport FilterRegion from '../components/FilterRegion/FilterRegion';\nimport SearchInput from '../components/SearchInput/SearchInput';\nimport './Countries.css';\n\ninterface countryData {\n  flag: string;\n  name: string;\n  population: number;\n  region: string;\n  capital: string;\n}\n\nconst Countries = () => {\n  const [data, setData] = useState<countryData[]>([]);\n  const [selected, setSelected] = useState(\"Filter by Region\");\n\n  const countriesFieldsMemo: countryData = useMemo(() => {\n    const countriesFields: countryData = {\n      flag: \"\",\n      name: \"\",\n      population: -1,\n      region: \"\",\n      capital: \"\"\n    }    \n    return countriesFields;\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const filteredData = await getCountryDataFiltered(countriesFieldsMemo);\n      setData(filteredData);\n    })();\n  }, [countriesFieldsMemo])\n\n  const getCountryDataFiltered = async (obj: countryData): Promise<Array<countryData>> => {\n    let fields = \"\";\n\n    for (let key in obj) {\n      fields = fields + key + ',';\n    }\n\n    const res = await fetch(`https://restcountries.com/v2/all?fields=${fields}`);\n    const json = await res.json();\n    return json;\n  }\n\n  const handleCountriesSearch = async (event: ChangeEvent<HTMLInputElement>) => {\n    const searchValue = event.target.value;\n\n    if (selected === \"Filter by Region\") {\n      getCountryDataFiltered(countriesFieldsMemo)\n      .then(filteredData => {\n        const countries = filteredData.filter(countryData => {\n          return countryData.name.toLowerCase().includes(searchValue.toLowerCase());\n        });\n        setData(countries);\n      });      \n    } else {\n      const res = await fetch(`https://restcountries.com/v2/region/${selected}`);\n      const json = await res.json();\n      let newData: Array<countryData> = json.map((countryData:any) => {\n        const { flag, name, population, region, capital } = countryData;\n        return { flag, name, population, region, capital };\n      })\n      .filter((countryData: countryData) => countryData.name.toLowerCase().includes(searchValue.toLowerCase()));\n\n      setData(newData);\n    }\n  }\n\n  const handleFilterRegion = async (event: ChangeEvent<HTMLSelectElement>) => {\n    const region = event.target.value;\n    let res;\n\n    if (region === \"Filter by Region\") {\n      res = await fetch('https://restcountries.com/v2/all');\n    } else {\n      res = await fetch(`https://restcountries.com/v2/region/${region}`);  \n    }\n    \n    const json = await res.json();\n    setData(json);    \n    setSelected(region);\n  }\n  \n  return (\n    <div>\n      <div className='filter-container'>\n        <div className='search'>\n          <SearchInput handleSearch={handleCountriesSearch} />\n        </div>\n        <div className='filter'>\n          <FilterRegion handleFilterRegion={handleFilterRegion} selected={selected}/>\n        </div>\n      </div>\n      <div className=\"countries\">\n        {\n          data.length === 0 \n          ? 'No Countries' \n          : data.map(countryData => {\n              return <CountriesCard \n                key={countryData.name} \n                flagUrl={countryData.flag} \n                countryName={countryData.name} \n                capital={countryData.capital} \n                population={countryData.population} \n                region={countryData.region} />\n          })\n        }         \n      </div>\n    </div>\n  )\n}\n\nexport default Countries;","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport { Route, Switch } from 'react-router-dom';\nimport Country from './pages/Country';\nimport Countries from './pages/Countries';\n\nfunction App() {\n  return (\n    <Layout>\n      <Switch>\n        <Route exact path='/world' component={Countries} />\n        <Route path='/world/country/:countryName' component={Country} />\n        <Route path='*'>\n          No Match 404\n        </Route>        \n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}