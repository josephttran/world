{"version":3,"sources":["components/Header/Header.tsx","components/SearchInput/SearchInput.tsx","components/FilterRegion/FilterRegion.tsx","components/Layout/Layout.tsx","components/CountriesCard/CountriesCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","title","useState","themeSwitcherText","setThemeSwitcherText","theme","setTheme","className","onClick","document","documentElement","setAttribute","SearchInput","handleSearch","type","name","id","placeholder","onChange","FilterRegion","handleFilterRegion","selected","value","map","region","Layout","children","CountriesCard","flagUrl","countryName","population","capital","src","alt","App","data","setData","setSelected","countriesFields","flag","useEffect","getCountryDataFiltered","then","filteredData","obj","a","key","fields","fetch","res","json","handleCountriesSearch","event","searchValue","target","countries","filter","countryData","toLowerCase","includes","newData","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uRA+BeA,EAxB0B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACJC,mBAAS,aADL,mBAC/CC,EAD+C,KAC5BC,EAD4B,OAE5BF,mBAAS,SAFmB,mBAE/CG,EAF+C,KAExCC,EAFwC,KAgBtD,OACE,yBAAQC,UAAU,SAAlB,UACE,oBAAIA,UAAU,gBAAd,SAAgCN,IAChC,wBAAQM,UAAU,gBAAgBC,QAflB,WACJ,UAAVH,GACFI,SAASC,gBAAgBC,aAAa,aAAc,QACpDL,EAAS,QACTF,EAAqB,gBAErBK,SAASC,gBAAgBC,aAAa,aAAc,SACpDL,EAAS,SACTF,EAAqB,eAOrB,SAAyDD,QCVhDS,EAZR,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACR,OACE,uBACEC,KAAK,OACLC,KAAK,eACLC,GAAG,eACHT,UAAU,eACVU,YAAY,qBACZC,SAAUL,KCMDM,EAbR,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,mBAAmC,EAAfC,SAG5B,OACE,yBAAQd,UAAU,uBAAuBQ,KAAK,GAAGC,GAAG,GAAGE,SAAUE,EAAjE,UACE,wBAAQJ,GAAG,GAAGM,MAAM,KAJF,CAAC,SAAU,WAAY,OAAQ,SAAU,WAM3CC,KAAI,SAAAC,GAAM,OAAI,wBAAqBR,GAAIQ,EAAzB,SAAkCA,GAArBA,UCqBlCC,EAtBR,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,SAAUb,EAAiD,EAAjDA,aAAcO,EAAmC,EAAnCA,mBAAoBC,EAAe,EAAfA,SACpD,OACE,sBAAKd,UAAU,YAAf,UACE,cAAC,EAAD,CAAQN,MAAM,cACd,uBAAMM,UAAU,OAAhB,UACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CAAaM,aAAcA,MAE7B,qBAAKN,UAAU,SAAf,SACE,cAAC,EAAD,CAAca,mBAAoBA,EAAoBC,SAAUA,SAGpE,qBAAKd,UAAU,YAAf,SACGmB,OAGL,wBAAQnB,UAAU,SAAlB,uBCLSoB,G,MAZ8C,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,QAASC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,WAAYN,EAAsB,EAAtBA,OAAQO,EAAc,EAAdA,QACxG,OACE,sBAAKxB,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAOyB,IAAKJ,EAASK,IAAKJ,IACzC,qBAAKtB,UAAU,UAAf,SAA0BsB,IAC1B,sBAAKtB,UAAU,aAAf,UAA4B,+CAA5B,IAAsDuB,KACtD,sBAAKvB,UAAU,SAAf,UAAwB,2CAAxB,IAA8CiB,KAC9C,sBAAKjB,UAAU,UAAf,UAAyB,4CAAzB,IAAgDwB,UCmFvCG,MAzFf,WAAgB,IAAD,EACWhC,mBAAwB,IADnC,mBACNiC,EADM,KACAC,EADA,OAEmBlC,mBAAS,IAF5B,mBAENmB,EAFM,KAEIgB,EAFJ,KAIPC,EAA+B,CACnCC,KAAM,GACNxB,KAAM,GACNe,YAAa,EACbN,OAAQ,GACRO,QAAS,IAGXS,qBAAU,WACRC,EAAuBH,GACpBI,MAAK,SAAAC,GACJP,EAAQO,QAEX,IAEH,IAAMF,EAAsB,uCAAG,WAAOG,GAAP,qBAAAC,EAAA,sDAG7B,IAASC,KAFLC,EAAS,GAEGH,EACdG,EAASA,EAASD,EAAM,IAJG,gBAOXE,MAAM,+CAAD,OAAgDD,IAP1C,cAOvBE,EAPuB,gBAQVA,EAAIC,OARM,cAQvBA,EARuB,yBAStBA,GATsB,2CAAH,sDAYtBC,EAAqB,uCAAG,WAAOC,GAAP,qBAAAP,EAAA,yDACtBQ,EAAcD,EAAME,OAAOhC,MAEhB,KAAbD,EAHwB,gBAI1BoB,EAAuBH,GACtBI,MAAK,SAAAC,GACJ,IAAMY,EAAYZ,EAAaa,QAAO,SAAAC,GACpC,OAAOA,EAAY1C,KAAK2C,cAAcC,SAASN,EAAYK,kBAE7DtB,EAAQmB,MATgB,uCAYRP,MAAM,2CAAD,OAA4C3B,IAZzC,cAYpB4B,EAZoB,iBAaPA,EAAIC,OAbG,QAapBA,EAboB,OActBU,EAA8BV,EAAK3B,KAAI,SAACkC,GAE1C,MAAO,CAAElB,KAD2CkB,EAA5ClB,KACOxB,KADqC0C,EAAtC1C,KACOe,WAD+B2B,EAAhC3B,WACaN,OADmBiC,EAApBjC,OACSO,QADW0B,EAAZ1B,YAGzCyB,QAAO,SAACC,GAAD,OAA8BA,EAAY1C,KAAK2C,cAAcC,SAASN,EAAYK,kBAE1FtB,EAAQwB,GApBkB,4CAAH,sDAwBrBxC,EAAkB,uCAAG,WAAOgC,GAAP,mBAAAP,EAAA,yDAIV,MAHTrB,EAAS4B,EAAME,OAAOhC,OADH,gCAKX0B,MAAM,wCALK,OAKvBC,EALuB,8CAOXD,MAAM,2CAAD,OAA4CxB,IAPtC,OAOvByB,EAPuB,OAQvBZ,EAAYb,GARW,yBAWNyB,EAAIC,OAXE,QAWnBA,EAXmB,OAYzBd,EAAQc,GAZiB,4CAAH,sDAexB,OACE,cAAC,EAAD,CAAQrC,aAAcsC,EAAuB/B,mBAAoBA,EAAoBC,SAAUA,EAA/F,SAEsB,IAAhBc,EAAK0B,OACH,eACA1B,EAAKZ,KAAI,SAAAkC,GACP,OAAO,cAAC,EAAD,CAEL7B,QAAS6B,EAAYlB,KACrBV,YAAa4B,EAAY1C,KACzBgB,QAAS0B,EAAY1B,QACrBD,WAAY2B,EAAY3B,WACxBN,OAAQiC,EAAYjC,QALfiC,EAAY1C,YC3ElB+C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/D,SAASgE,eAAe,SAM1BX,M","file":"static/js/main.8f81a5b7.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport './Header.css';\n\ninterface props {\n  title: string;\n}\n\nconst Header: FunctionComponent<props> = ({ title }) => {\n  const [themeSwitcherText, setThemeSwitcherText] = useState('Dark Mode');\n  const [theme, setTheme] = useState('light');\n  \n  const switchTheme = () => {\n    if (theme === 'light') {\n      document.documentElement.setAttribute('data-theme', 'dark');\n      setTheme('dark');\n      setThemeSwitcherText('Light Mode');\n    } else {\n      document.documentElement.setAttribute('data-theme', 'light');\n      setTheme('light');\n      setThemeSwitcherText('Dark Mode');\n    }\n  }\n\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">{ title }</h1>\n      <button className=\"themeSwitcher\" onClick={switchTheme}>{themeSwitcherText}</button>\n    </header>\n  )\n}\n\nexport default Header;\n\n","import React, { ChangeEventHandler, FunctionComponent } from 'react';\n\nconst SearchInput: FunctionComponent<{ \n    handleSearch: ChangeEventHandler<HTMLInputElement> \n  }> = ({ handleSearch }) => {\n  return (\n    <input \n      type=\"text\" \n      name=\"search-input\" \n      id=\"search-input\" \n      className=\"search-input\" \n      placeholder=\"Search for Country\" \n      onChange={handleSearch} />\n  )\n}\n\nexport default SearchInput;","import React, { ChangeEventHandler, FunctionComponent } from 'react';\n\nconst FilterRegion: FunctionComponent<{\n    handleFilterRegion: ChangeEventHandler<HTMLSelectElement>, \n    selected: string\n  }> = ({ handleFilterRegion, selected }) => {\n  const regionOptions = [\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"];\n  \n  return (\n    <select className='filter-region-select' name=\"\" id=\"\" onChange={handleFilterRegion}>\n      <option id=\"\" value=\"\"></option>\n      {\n        regionOptions.map(region => <option key={region} id={region}>{region}</option>)\n      }\n    </select>\n  )\n}\n\nexport default FilterRegion;","import React, { ChangeEventHandler, FunctionComponent, ReactNode } from 'react';\nimport './Layout.css';\nimport Header from '../Header/Header';\nimport SearchInput from '../SearchInput/SearchInput';\nimport FilterRegion from '../FilterRegion/FilterRegion';\n\nconst Layout: FunctionComponent<{ \n    children: ReactNode,\n    handleFilterRegion: ChangeEventHandler<HTMLSelectElement>,\n    handleSearch: ChangeEventHandler<HTMLInputElement>,\n    selected: string\n  }> = ({ children, handleSearch, handleFilterRegion, selected }) => {\n  return (\n    <div className='container'>\n      <Header title='World App'/>\n      <main className=\"main\">\n        <div className='filter-container'>\n          <div className='search'>\n            <SearchInput handleSearch={handleSearch} />\n          </div>\n          <div className='filter'>\n            <FilterRegion handleFilterRegion={handleFilterRegion} selected={selected}/>\n          </div>\n        </div>\n        <div className=\"countries\">\n          {children}          \n        </div>\n      </main>\n      <footer className=\"footer\">World</footer>\n    </div>\n  )\n}\n\nexport default Layout;","import React, { FunctionComponent } from 'react';\nimport './CountriesCard.css';\n\ninterface CountriesCardProps {\n  flagUrl: string;\n  countryName: string;\n  population: number;\n  region: string;\n  capital: string;\n}\n\nconst CountriesCard: FunctionComponent<CountriesCardProps> = ({ flagUrl, countryName, population, region, capital }) => {\n  return (\n    <div className='card'>\n      <img className='flag' src={flagUrl} alt={countryName}/>\n      <div className='country'>{countryName}</div>\n      <div className='population'><span>Population:</span> {population}</div>\n      <div className='region'><span>Region:</span> {region}</div>\n      <div className='capital'><span>Capital:</span> {capital}</div>\n    </div>\n  )\n}\n\nexport default CountriesCard;","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport Layout from './components/Layout/Layout';\nimport CountriesCard from './components/CountriesCard/CountriesCard';\n\ninterface countryData {\n  flag: string;\n  name: string;\n  population: number;\n  region: string;\n  capital: string;\n}\n\nfunction App() {\n  const [data, setData] = useState<countryData[]>([]);\n  const [selected, setSelected] = useState(\"\");\n\n  const countriesFields: countryData = {\n    flag: \"\",\n    name: \"\",\n    population: -1,\n    region: \"\",\n    capital: \"\"\n  };\n\n  useEffect(() => {\n    getCountryDataFiltered(countriesFields)\n      .then(filteredData => {\n        setData(filteredData)\n      });// eslint-disable-next-line\n  }, [])\n\n  const getCountryDataFiltered = async (obj: countryData): Promise<Array<countryData>> => {\n    let fields = \"\";\n\n    for (let key in obj) {\n      fields = fields + key + ';';\n    }\n\n    const res = await fetch(`https://restcountries.eu/rest/v2/all?fields=${fields}`);\n    const json = await res.json();\n    return json;\n  }\n\n  const handleCountriesSearch = async (event: ChangeEvent<HTMLInputElement>) => {\n    const searchValue = event.target.value;\n\n    if (selected === \"\") {\n      getCountryDataFiltered(countriesFields)\n      .then(filteredData => {\n        const countries = filteredData.filter(countryData => {\n          return countryData.name.toLowerCase().includes(searchValue.toLowerCase());\n        });\n        setData(countries);\n      });      \n    } else {\n      const res = await fetch(`https://restcountries.eu/rest/v2/region/${selected}`);\n      const json = await res.json();\n      let newData: Array<countryData> = json.map((countryData:any) => {\n        const { flag, name, population, region, capital } = countryData;\n        return { flag, name, population, region, capital };\n      })\n      .filter((countryData: countryData) => countryData.name.toLowerCase().includes(searchValue.toLowerCase()));\n\n      setData(newData);\n    }\n  }\n\n  const handleFilterRegion = async (event: ChangeEvent<HTMLSelectElement>) => {\n    const region = event.target.value;\n    let res;\n\n    if (region === \"\") {\n      res = await fetch('https://restcountries.eu/rest/v2/all');\n    } else {\n      res = await fetch(`https://restcountries.eu/rest/v2/region/${region}`);  \n      setSelected(region);\n    }\n\n    const json = await res.json();\n    setData(json);    \n  }\n\n  return (\n    <Layout handleSearch={handleCountriesSearch} handleFilterRegion={handleFilterRegion} selected={selected}>\n        {\n          data.length === 0 \n          ? 'No Countries' \n          : data.map(countryData => {\n              return <CountriesCard \n                key={countryData.name} \n                flagUrl={countryData.flag} \n                countryName={countryData.name} \n                capital={countryData.capital} \n                population={countryData.population} \n                region={countryData.region} />\n          })\n        }\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}